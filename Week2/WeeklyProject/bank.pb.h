// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bank.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bank_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bank_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bank_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bank_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bank_2eproto;
namespace BANK {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Bank;
struct BankDefaultTypeInternal;
extern BankDefaultTypeInternal _Bank_default_instance_;
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace BANK
PROTOBUF_NAMESPACE_OPEN
template<> ::BANK::Account* Arena::CreateMaybeMessage<::BANK::Account>(Arena*);
template<> ::BANK::Bank* Arena::CreateMaybeMessage<::BANK::Bank>(Arena*);
template<> ::BANK::Error* Arena::CreateMaybeMessage<::BANK::Error>(Arena*);
template<> ::BANK::Transaction* Arena::CreateMaybeMessage<::BANK::Transaction>(Arena*);
template<> ::BANK::User* Arena::CreateMaybeMessage<::BANK::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BANK {

enum Transaction_Transaction_Type : int {
  Transaction_Transaction_Type_DEBIT = 0,
  Transaction_Transaction_Type_CREDIT = 1,
  Transaction_Transaction_Type_Transaction_Transaction_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Transaction_Transaction_Type_Transaction_Transaction_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Transaction_Transaction_Type_IsValid(int value);
constexpr Transaction_Transaction_Type Transaction_Transaction_Type_Transaction_Type_MIN = Transaction_Transaction_Type_DEBIT;
constexpr Transaction_Transaction_Type Transaction_Transaction_Type_Transaction_Type_MAX = Transaction_Transaction_Type_CREDIT;
constexpr int Transaction_Transaction_Type_Transaction_Type_ARRAYSIZE = Transaction_Transaction_Type_Transaction_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Transaction_Type_descriptor();
template<typename T>
inline const std::string& Transaction_Transaction_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Transaction_Transaction_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Transaction_Transaction_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Transaction_Transaction_Type_descriptor(), enum_t_value);
}
inline bool Transaction_Transaction_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Transaction_Transaction_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Transaction_Transaction_Type>(
    Transaction_Transaction_Type_descriptor(), name, value);
}
// ===================================================================

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BANK.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit constexpr User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BANK.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string userName = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:BANK.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BANK.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BANK.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Transaction_Transaction_Type Transaction_Type;
  static constexpr Transaction_Type DEBIT =
    Transaction_Transaction_Type_DEBIT;
  static constexpr Transaction_Type CREDIT =
    Transaction_Transaction_Type_CREDIT;
  static inline bool Transaction_Type_IsValid(int value) {
    return Transaction_Transaction_Type_IsValid(value);
  }
  static constexpr Transaction_Type Transaction_Type_MIN =
    Transaction_Transaction_Type_Transaction_Type_MIN;
  static constexpr Transaction_Type Transaction_Type_MAX =
    Transaction_Transaction_Type_Transaction_Type_MAX;
  static constexpr int Transaction_Type_ARRAYSIZE =
    Transaction_Transaction_Type_Transaction_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Transaction_Type_descriptor() {
    return Transaction_Transaction_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Transaction_Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Transaction_Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Transaction_Type_Name.");
    return Transaction_Transaction_Type_Name(enum_t_value);
  }
  static inline bool Transaction_Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Transaction_Type* value) {
    return Transaction_Transaction_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDollarsFieldNumber = 1,
    kCentsFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int64 dollars = 1;
  void clear_dollars();
  int64_t dollars() const;
  void set_dollars(int64_t value);
  private:
  int64_t _internal_dollars() const;
  void _internal_set_dollars(int64_t value);
  public:

  // int64 cents = 2;
  void clear_cents();
  int64_t cents() const;
  void set_cents(int64_t value);
  private:
  int64_t _internal_cents() const;
  void _internal_set_cents(int64_t value);
  public:

  // .BANK.Transaction.Transaction_Type type = 3;
  void clear_type();
  ::BANK::Transaction_Transaction_Type type() const;
  void set_type(::BANK::Transaction_Transaction_Type value);
  private:
  ::BANK::Transaction_Transaction_Type _internal_type() const;
  void _internal_set_type(::BANK::Transaction_Transaction_Type value);
  public:

  // @@protoc_insertion_point(class_scope:BANK.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t dollars_;
  int64_t cents_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class Account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BANK.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  explicit constexpr Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Account& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BANK.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 8,
    kSsnFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kOpenDateFieldNumber = 5,
    kDollarsFieldNumber = 6,
    kCentsFieldNumber = 7,
    kAccountNumFieldNumber = 1,
  };
  // repeated .BANK.Transaction transactions = 8;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::BANK::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Transaction >*
      mutable_transactions();
  private:
  const ::BANK::Transaction& _internal_transactions(int index) const;
  ::BANK::Transaction* _internal_add_transactions();
  public:
  const ::BANK::Transaction& transactions(int index) const;
  ::BANK::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Transaction >&
      transactions() const;

  // string ssn = 2;
  void clear_ssn();
  const std::string& ssn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssn();
  PROTOBUF_NODISCARD std::string* release_ssn();
  void set_allocated_ssn(std::string* ssn);
  private:
  const std::string& _internal_ssn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssn(const std::string& value);
  std::string* _internal_mutable_ssn();
  public:

  // string firstName = 3;
  void clear_firstname();
  const std::string& firstname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstname();
  PROTOBUF_NODISCARD std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // string lastName = 4;
  void clear_lastname();
  const std::string& lastname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastname();
  PROTOBUF_NODISCARD std::string* release_lastname();
  void set_allocated_lastname(std::string* lastname);
  private:
  const std::string& _internal_lastname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastname(const std::string& value);
  std::string* _internal_mutable_lastname();
  public:

  // string openDate = 5;
  void clear_opendate();
  const std::string& opendate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opendate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opendate();
  PROTOBUF_NODISCARD std::string* release_opendate();
  void set_allocated_opendate(std::string* opendate);
  private:
  const std::string& _internal_opendate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opendate(const std::string& value);
  std::string* _internal_mutable_opendate();
  public:

  // int64 dollars = 6;
  void clear_dollars();
  int64_t dollars() const;
  void set_dollars(int64_t value);
  private:
  int64_t _internal_dollars() const;
  void _internal_set_dollars(int64_t value);
  public:

  // int64 cents = 7;
  void clear_cents();
  int64_t cents() const;
  void set_cents(int64_t value);
  private:
  int64_t _internal_cents() const;
  void _internal_set_cents(int64_t value);
  public:

  // int32 accountNum = 1;
  void clear_accountnum();
  int32_t accountnum() const;
  void set_accountnum(int32_t value);
  private:
  int32_t _internal_accountnum() const;
  void _internal_set_accountnum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:BANK.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Transaction > transactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opendate_;
  int64_t dollars_;
  int64_t cents_;
  int32_t accountnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BANK.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  explicit constexpr Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BANK.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // string error = 1;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:BANK.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class Bank final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BANK.Bank) */ {
 public:
  inline Bank() : Bank(nullptr) {}
  ~Bank() override;
  explicit constexpr Bank(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bank(const Bank& from);
  Bank(Bank&& from) noexcept
    : Bank() {
    *this = ::std::move(from);
  }

  inline Bank& operator=(const Bank& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bank& operator=(Bank&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bank& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bank* internal_default_instance() {
    return reinterpret_cast<const Bank*>(
               &_Bank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Bank& a, Bank& b) {
    a.Swap(&b);
  }
  inline void Swap(Bank* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bank>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bank& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bank& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bank* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BANK.Bank";
  }
  protected:
  explicit Bank(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllAccountsFieldNumber = 1,
    kAllUsersFieldNumber = 2,
    kErrorLogFieldNumber = 3,
  };
  // repeated .BANK.Account allAccounts = 1;
  int allaccounts_size() const;
  private:
  int _internal_allaccounts_size() const;
  public:
  void clear_allaccounts();
  ::BANK::Account* mutable_allaccounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Account >*
      mutable_allaccounts();
  private:
  const ::BANK::Account& _internal_allaccounts(int index) const;
  ::BANK::Account* _internal_add_allaccounts();
  public:
  const ::BANK::Account& allaccounts(int index) const;
  ::BANK::Account* add_allaccounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Account >&
      allaccounts() const;

  // repeated .BANK.User allUsers = 2;
  int allusers_size() const;
  private:
  int _internal_allusers_size() const;
  public:
  void clear_allusers();
  ::BANK::User* mutable_allusers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::User >*
      mutable_allusers();
  private:
  const ::BANK::User& _internal_allusers(int index) const;
  ::BANK::User* _internal_add_allusers();
  public:
  const ::BANK::User& allusers(int index) const;
  ::BANK::User* add_allusers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::User >&
      allusers() const;

  // repeated .BANK.Error errorLog = 3;
  int errorlog_size() const;
  private:
  int _internal_errorlog_size() const;
  public:
  void clear_errorlog();
  ::BANK::Error* mutable_errorlog(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Error >*
      mutable_errorlog();
  private:
  const ::BANK::Error& _internal_errorlog(int index) const;
  ::BANK::Error* _internal_add_errorlog();
  public:
  const ::BANK::Error& errorlog(int index) const;
  ::BANK::Error* add_errorlog();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Error >&
      errorlog() const;

  // @@protoc_insertion_point(class_scope:BANK.Bank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Account > allaccounts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::User > allusers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Error > errorlog_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// string userName = 1;
inline void User::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& User::username() const {
  // @@protoc_insertion_point(field_get:BANK.User.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BANK.User.userName)
}
inline std::string* User::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:BANK.User.userName)
  return _s;
}
inline const std::string& User::_internal_username() const {
  return username_.Get();
}
inline void User::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:BANK.User.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BANK.User.userName)
}

// string password = 2;
inline void User::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& User::password() const {
  // @@protoc_insertion_point(field_get:BANK.User.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BANK.User.password)
}
inline std::string* User::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:BANK.User.password)
  return _s;
}
inline const std::string& User::_internal_password() const {
  return password_.Get();
}
inline void User::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:BANK.User.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BANK.User.password)
}

// -------------------------------------------------------------------

// Transaction

// int64 dollars = 1;
inline void Transaction::clear_dollars() {
  dollars_ = int64_t{0};
}
inline int64_t Transaction::_internal_dollars() const {
  return dollars_;
}
inline int64_t Transaction::dollars() const {
  // @@protoc_insertion_point(field_get:BANK.Transaction.dollars)
  return _internal_dollars();
}
inline void Transaction::_internal_set_dollars(int64_t value) {
  
  dollars_ = value;
}
inline void Transaction::set_dollars(int64_t value) {
  _internal_set_dollars(value);
  // @@protoc_insertion_point(field_set:BANK.Transaction.dollars)
}

// int64 cents = 2;
inline void Transaction::clear_cents() {
  cents_ = int64_t{0};
}
inline int64_t Transaction::_internal_cents() const {
  return cents_;
}
inline int64_t Transaction::cents() const {
  // @@protoc_insertion_point(field_get:BANK.Transaction.cents)
  return _internal_cents();
}
inline void Transaction::_internal_set_cents(int64_t value) {
  
  cents_ = value;
}
inline void Transaction::set_cents(int64_t value) {
  _internal_set_cents(value);
  // @@protoc_insertion_point(field_set:BANK.Transaction.cents)
}

// .BANK.Transaction.Transaction_Type type = 3;
inline void Transaction::clear_type() {
  type_ = 0;
}
inline ::BANK::Transaction_Transaction_Type Transaction::_internal_type() const {
  return static_cast< ::BANK::Transaction_Transaction_Type >(type_);
}
inline ::BANK::Transaction_Transaction_Type Transaction::type() const {
  // @@protoc_insertion_point(field_get:BANK.Transaction.type)
  return _internal_type();
}
inline void Transaction::_internal_set_type(::BANK::Transaction_Transaction_Type value) {
  
  type_ = value;
}
inline void Transaction::set_type(::BANK::Transaction_Transaction_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BANK.Transaction.type)
}

// -------------------------------------------------------------------

// Account

// int32 accountNum = 1;
inline void Account::clear_accountnum() {
  accountnum_ = 0;
}
inline int32_t Account::_internal_accountnum() const {
  return accountnum_;
}
inline int32_t Account::accountnum() const {
  // @@protoc_insertion_point(field_get:BANK.Account.accountNum)
  return _internal_accountnum();
}
inline void Account::_internal_set_accountnum(int32_t value) {
  
  accountnum_ = value;
}
inline void Account::set_accountnum(int32_t value) {
  _internal_set_accountnum(value);
  // @@protoc_insertion_point(field_set:BANK.Account.accountNum)
}

// string ssn = 2;
inline void Account::clear_ssn() {
  ssn_.ClearToEmpty();
}
inline const std::string& Account::ssn() const {
  // @@protoc_insertion_point(field_get:BANK.Account.ssn)
  return _internal_ssn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_ssn(ArgT0&& arg0, ArgT... args) {
 
 ssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BANK.Account.ssn)
}
inline std::string* Account::mutable_ssn() {
  std::string* _s = _internal_mutable_ssn();
  // @@protoc_insertion_point(field_mutable:BANK.Account.ssn)
  return _s;
}
inline const std::string& Account::_internal_ssn() const {
  return ssn_.Get();
}
inline void Account::_internal_set_ssn(const std::string& value) {
  
  ssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_ssn() {
  
  return ssn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_ssn() {
  // @@protoc_insertion_point(field_release:BANK.Account.ssn)
  return ssn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Account::set_allocated_ssn(std::string* ssn) {
  if (ssn != nullptr) {
    
  } else {
    
  }
  ssn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ssn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BANK.Account.ssn)
}

// string firstName = 3;
inline void Account::clear_firstname() {
  firstname_.ClearToEmpty();
}
inline const std::string& Account::firstname() const {
  // @@protoc_insertion_point(field_get:BANK.Account.firstName)
  return _internal_firstname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_firstname(ArgT0&& arg0, ArgT... args) {
 
 firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BANK.Account.firstName)
}
inline std::string* Account::mutable_firstname() {
  std::string* _s = _internal_mutable_firstname();
  // @@protoc_insertion_point(field_mutable:BANK.Account.firstName)
  return _s;
}
inline const std::string& Account::_internal_firstname() const {
  return firstname_.Get();
}
inline void Account::_internal_set_firstname(const std::string& value) {
  
  firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_firstname() {
  
  return firstname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_firstname() {
  // @@protoc_insertion_point(field_release:BANK.Account.firstName)
  return firstname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Account::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  firstname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firstname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (firstname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    firstname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BANK.Account.firstName)
}

// string lastName = 4;
inline void Account::clear_lastname() {
  lastname_.ClearToEmpty();
}
inline const std::string& Account::lastname() const {
  // @@protoc_insertion_point(field_get:BANK.Account.lastName)
  return _internal_lastname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_lastname(ArgT0&& arg0, ArgT... args) {
 
 lastname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BANK.Account.lastName)
}
inline std::string* Account::mutable_lastname() {
  std::string* _s = _internal_mutable_lastname();
  // @@protoc_insertion_point(field_mutable:BANK.Account.lastName)
  return _s;
}
inline const std::string& Account::_internal_lastname() const {
  return lastname_.Get();
}
inline void Account::_internal_set_lastname(const std::string& value) {
  
  lastname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_lastname() {
  
  return lastname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_lastname() {
  // @@protoc_insertion_point(field_release:BANK.Account.lastName)
  return lastname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Account::set_allocated_lastname(std::string* lastname) {
  if (lastname != nullptr) {
    
  } else {
    
  }
  lastname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lastname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lastname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BANK.Account.lastName)
}

// string openDate = 5;
inline void Account::clear_opendate() {
  opendate_.ClearToEmpty();
}
inline const std::string& Account::opendate() const {
  // @@protoc_insertion_point(field_get:BANK.Account.openDate)
  return _internal_opendate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_opendate(ArgT0&& arg0, ArgT... args) {
 
 opendate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BANK.Account.openDate)
}
inline std::string* Account::mutable_opendate() {
  std::string* _s = _internal_mutable_opendate();
  // @@protoc_insertion_point(field_mutable:BANK.Account.openDate)
  return _s;
}
inline const std::string& Account::_internal_opendate() const {
  return opendate_.Get();
}
inline void Account::_internal_set_opendate(const std::string& value) {
  
  opendate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_opendate() {
  
  return opendate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_opendate() {
  // @@protoc_insertion_point(field_release:BANK.Account.openDate)
  return opendate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Account::set_allocated_opendate(std::string* opendate) {
  if (opendate != nullptr) {
    
  } else {
    
  }
  opendate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opendate,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (opendate_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    opendate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BANK.Account.openDate)
}

// int64 dollars = 6;
inline void Account::clear_dollars() {
  dollars_ = int64_t{0};
}
inline int64_t Account::_internal_dollars() const {
  return dollars_;
}
inline int64_t Account::dollars() const {
  // @@protoc_insertion_point(field_get:BANK.Account.dollars)
  return _internal_dollars();
}
inline void Account::_internal_set_dollars(int64_t value) {
  
  dollars_ = value;
}
inline void Account::set_dollars(int64_t value) {
  _internal_set_dollars(value);
  // @@protoc_insertion_point(field_set:BANK.Account.dollars)
}

// int64 cents = 7;
inline void Account::clear_cents() {
  cents_ = int64_t{0};
}
inline int64_t Account::_internal_cents() const {
  return cents_;
}
inline int64_t Account::cents() const {
  // @@protoc_insertion_point(field_get:BANK.Account.cents)
  return _internal_cents();
}
inline void Account::_internal_set_cents(int64_t value) {
  
  cents_ = value;
}
inline void Account::set_cents(int64_t value) {
  _internal_set_cents(value);
  // @@protoc_insertion_point(field_set:BANK.Account.cents)
}

// repeated .BANK.Transaction transactions = 8;
inline int Account::_internal_transactions_size() const {
  return transactions_.size();
}
inline int Account::transactions_size() const {
  return _internal_transactions_size();
}
inline void Account::clear_transactions() {
  transactions_.Clear();
}
inline ::BANK::Transaction* Account::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:BANK.Account.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Transaction >*
Account::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:BANK.Account.transactions)
  return &transactions_;
}
inline const ::BANK::Transaction& Account::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::BANK::Transaction& Account::transactions(int index) const {
  // @@protoc_insertion_point(field_get:BANK.Account.transactions)
  return _internal_transactions(index);
}
inline ::BANK::Transaction* Account::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::BANK::Transaction* Account::add_transactions() {
  ::BANK::Transaction* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:BANK.Account.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Transaction >&
Account::transactions() const {
  // @@protoc_insertion_point(field_list:BANK.Account.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// Error

// string error = 1;
inline void Error::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& Error::error() const {
  // @@protoc_insertion_point(field_get:BANK.Error.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Error::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BANK.Error.error)
}
inline std::string* Error::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:BANK.Error.error)
  return _s;
}
inline const std::string& Error::_internal_error() const {
  return error_.Get();
}
inline void Error::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Error::release_error() {
  // @@protoc_insertion_point(field_release:BANK.Error.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Error::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BANK.Error.error)
}

// -------------------------------------------------------------------

// Bank

// repeated .BANK.Account allAccounts = 1;
inline int Bank::_internal_allaccounts_size() const {
  return allaccounts_.size();
}
inline int Bank::allaccounts_size() const {
  return _internal_allaccounts_size();
}
inline void Bank::clear_allaccounts() {
  allaccounts_.Clear();
}
inline ::BANK::Account* Bank::mutable_allaccounts(int index) {
  // @@protoc_insertion_point(field_mutable:BANK.Bank.allAccounts)
  return allaccounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Account >*
Bank::mutable_allaccounts() {
  // @@protoc_insertion_point(field_mutable_list:BANK.Bank.allAccounts)
  return &allaccounts_;
}
inline const ::BANK::Account& Bank::_internal_allaccounts(int index) const {
  return allaccounts_.Get(index);
}
inline const ::BANK::Account& Bank::allaccounts(int index) const {
  // @@protoc_insertion_point(field_get:BANK.Bank.allAccounts)
  return _internal_allaccounts(index);
}
inline ::BANK::Account* Bank::_internal_add_allaccounts() {
  return allaccounts_.Add();
}
inline ::BANK::Account* Bank::add_allaccounts() {
  ::BANK::Account* _add = _internal_add_allaccounts();
  // @@protoc_insertion_point(field_add:BANK.Bank.allAccounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Account >&
Bank::allaccounts() const {
  // @@protoc_insertion_point(field_list:BANK.Bank.allAccounts)
  return allaccounts_;
}

// repeated .BANK.User allUsers = 2;
inline int Bank::_internal_allusers_size() const {
  return allusers_.size();
}
inline int Bank::allusers_size() const {
  return _internal_allusers_size();
}
inline void Bank::clear_allusers() {
  allusers_.Clear();
}
inline ::BANK::User* Bank::mutable_allusers(int index) {
  // @@protoc_insertion_point(field_mutable:BANK.Bank.allUsers)
  return allusers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::User >*
Bank::mutable_allusers() {
  // @@protoc_insertion_point(field_mutable_list:BANK.Bank.allUsers)
  return &allusers_;
}
inline const ::BANK::User& Bank::_internal_allusers(int index) const {
  return allusers_.Get(index);
}
inline const ::BANK::User& Bank::allusers(int index) const {
  // @@protoc_insertion_point(field_get:BANK.Bank.allUsers)
  return _internal_allusers(index);
}
inline ::BANK::User* Bank::_internal_add_allusers() {
  return allusers_.Add();
}
inline ::BANK::User* Bank::add_allusers() {
  ::BANK::User* _add = _internal_add_allusers();
  // @@protoc_insertion_point(field_add:BANK.Bank.allUsers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::User >&
Bank::allusers() const {
  // @@protoc_insertion_point(field_list:BANK.Bank.allUsers)
  return allusers_;
}

// repeated .BANK.Error errorLog = 3;
inline int Bank::_internal_errorlog_size() const {
  return errorlog_.size();
}
inline int Bank::errorlog_size() const {
  return _internal_errorlog_size();
}
inline void Bank::clear_errorlog() {
  errorlog_.Clear();
}
inline ::BANK::Error* Bank::mutable_errorlog(int index) {
  // @@protoc_insertion_point(field_mutable:BANK.Bank.errorLog)
  return errorlog_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Error >*
Bank::mutable_errorlog() {
  // @@protoc_insertion_point(field_mutable_list:BANK.Bank.errorLog)
  return &errorlog_;
}
inline const ::BANK::Error& Bank::_internal_errorlog(int index) const {
  return errorlog_.Get(index);
}
inline const ::BANK::Error& Bank::errorlog(int index) const {
  // @@protoc_insertion_point(field_get:BANK.Bank.errorLog)
  return _internal_errorlog(index);
}
inline ::BANK::Error* Bank::_internal_add_errorlog() {
  return errorlog_.Add();
}
inline ::BANK::Error* Bank::add_errorlog() {
  ::BANK::Error* _add = _internal_add_errorlog();
  // @@protoc_insertion_point(field_add:BANK.Bank.errorLog)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BANK::Error >&
Bank::errorlog() const {
  // @@protoc_insertion_point(field_list:BANK.Bank.errorLog)
  return errorlog_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BANK

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BANK::Transaction_Transaction_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BANK::Transaction_Transaction_Type>() {
  return ::BANK::Transaction_Transaction_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bank_2eproto
